
==================== src/core/anvil.rs ====================
use std::sync::Arc;
use std::ops::Div;
use anyhow::Result;
use alloy::providers::Provider;
use alloy::{
    node_bindings::Anvil,
    primitives::U256,
    providers::{ProviderBuilder, RootProvider},
    transports::http::reqwest::Url,
};

use crate::types::{ChainConfig, ONE_ETHER};
use crate::source::{builder::volumes, abi::*, builder::build_tx};
use crate::core::logger::{measure_start, measure_end};

/// Chạy mô phỏng quote thông qua Anvil forked mainnet
/// → Có thể so sánh với eth_call hoặc revm để kiểm tra kết quả giống thực tế
pub async fn run_eth_anvil(config: &ChainConfig) -> Result<()> {
    // 1️⃣ Parse RPC URL và khởi tạo provider thật
    let rpc_url = config.rpc_url.parse::<Url>()?;
    let provider = ProviderBuilder::new().on_http(rpc_url.clone());
    let provider = Arc::new(provider);

    // 2️⃣ Lấy base_fee và block height để tạo fork
    let base_fee = provider.get_gas_price().await?;
    let fork_block = provider.get_block_number().await?;

    // 3️⃣ Tạo instance Anvil fork từ block thực
    let anvil = Anvil::new()
        .fork(rpc_url)
        .fork_block_number(fork_block)
        .block_time(1_u64)
        .spawn();

    // 4️⃣ Tạo provider kết nối đến Anvil local fork
    let anvil_provider = ProviderBuilder::new()
        .on_http(anvil.endpoint().parse::<Url>()?);
    let anvil_provider = Arc::new(anvil_provider);

    // 5️⃣ Lấy thông tin token / quoter / from từ config
    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let quoter = config.addr("QUOTER")?;

    // 6️⃣ Chuẩn bị volumes để benchmark
    let volumes = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 100);

    // 7️⃣ Quote lần đầu
    let start = measure_start("anvil_first");
    let calldata = quote_calldata(token_in, token_out, volumes[0], 3000);
    let tx = build_tx(quoter, from, calldata, base_fee);
    let response = anvil_provider.call(&tx).await?;
    let amount_out = decode_quote_response(response)?;
    println!("{} WETH -> USDC {}", volumes[0], amount_out);
    measure_end(start);

    // 8️⃣ Loop để benchmark nhiều volume
    let start = measure_start("anvil_loop");
    for (index, volume) in volumes.into_iter().enumerate() {
        let calldata = quote_calldata(token_in, token_out, volume, 3000);
        let tx = build_tx(quoter, from, calldata, base_fee);
        let response = anvil_provider.call(&tx).await?;
        let amount_out = decode_quote_response(response)?;
        if index % 20 == 0 {
            println!("{} WETH -> USDC {}", volume, amount_out);
        }
    }
    measure_end(start);

    drop(anvil); // cleanup anvil instance

    Ok(())
}



==================== src/core/arbitrage.rs ====================
use std::sync::Arc;
use std::{ops::Div, str::FromStr};

use alloy::signers::k256::elliptic_curve::consts::U2;
use anyhow::Result;
use alloy::{
    primitives::{Bytes, U256},
    providers::ProviderBuilder,
};
use revm::primitives::Bytecode;

use crate::types::{ChainConfig, ONE_ETHER};
use crate::source::{abi::*, builder::volumes};
use crate::core::db::*;

/// Mô phỏng back-and-forth arbitrage WETH -> USDC -> WETH
/// Dùng custom UniV3Quoter để quote offchain qua REVM
pub async fn run_eth_arbitrage(config: &ChainConfig) -> Result<()> {
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);
    // Tạo REVM cache database từ provider

    let mut cache_db = init_cache_db(provider.clone());

    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let pool1 = config.addr("POOL_500")?;
    let pool2 = config.addr("POOL_3000")?;
    let quoter = config.addr("CUSTOM_QUOTER")?;

    let mocked_erc20 = include_str!("../bytecode/generic_erc20.hex");
    let mocked_erc20 = Bytecode::new_raw(Bytes::from_str(mocked_erc20)?);

    let mocked_quoter = include_str!("../bytecode/uni_v3_quoter.hex");
    let mocked_quoter = Bytecode::new_raw(Bytes::from_str(mocked_quoter)?);

    // Khởi tạo REVM state cho quoter, pool, token
    init_account(from, &mut cache_db, provider.clone()).await?;
    init_account(pool1, &mut cache_db, provider.clone()).await?;
    init_account(pool2, &mut cache_db, provider.clone()).await?;

    init_account_with_bytecode(token_in, mocked_erc20.clone(), &mut cache_db)?;
    init_account_with_bytecode(token_out, mocked_erc20.clone(), &mut cache_db)?;
    init_account_with_bytecode(quoter, mocked_quoter, &mut cache_db)?;

    let mocked_balance = U256::MAX.div(U256::from(2));
    for &pool in &[pool1, pool2] {
        insert_mapping_storage_slot(token_in, U256::ZERO, pool, mocked_balance, &mut cache_db)?;
        insert_mapping_storage_slot(token_out, U256::ZERO, pool, mocked_balance, &mut cache_db)?;
    }

    // Loop từng volume để kiểm tra arbitrage
    let vols = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 100);
    for vol in vols {
        let calldata1 = get_amount_out_calldata(pool1, token_in, token_out, vol);
        let resp1 = revm_revert(from, quoter, calldata1, &mut cache_db)?;
        let token_out_amount = decode_get_amount_out_response(resp1)?;

        let calldata2 = get_amount_out_calldata(pool2, token_out, token_in, U256::from(token_out_amount));
        let resp2 = revm_revert(from, quoter, calldata2, &mut cache_db)?;
        let token_in_back = decode_get_amount_out_response(resp2)?;
        let token_in_back = U256::from(token_in_back);

        println!(
            "{} WETH → USDC {} → WETH {}",
            vol, token_out_amount, token_in_back
        );

        if token_in_back > vol {
            let profit = token_in_back - vol;
            println!("✅ Arbitrage profit: {} WETH", profit);
        } else {
            println!("❌ No profit");
        }
    }

    Ok(())
}



==================== src/core/call.rs ====================
use std::sync::Arc;
use std::ops::Div;
use anyhow::Result;
use alloy::{
    primitives::U256,
    providers::{Provider, ProviderBuilder},
};
use crate::types::ChainConfig;
use crate::source::{builder::*, abi::*};
use crate::core::logger::{measure_start, measure_end};

pub async fn run_eth_call(config: &ChainConfig) -> Result<()> {
    // Setup provider
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);

    // Lấy base fee
    let base_fee = provider.get_gas_price().await?;
    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let quoter = config.addr("QUOTER")?;

    // Chuẩn bị volumes
    let volumes = volumes(U256::ZERO, crate::types::ONE_ETHER.div(U256::from(10)), 100);

    let start = measure_start("eth_call");

    for (index, volume) in volumes.into_iter().enumerate() {
        let calldata = quote_calldata(token_in, token_out, volume, 3000);
        let tx = build_tx(quoter, from, calldata, base_fee);
        let response = provider.call(&tx).await?;
        let amount_out = decode_quote_response(response)?;

        if index % 20 == 0 {
            println!("{} WETH -> USDC {}", volume, amount_out);
        }
    }

    measure_end(start);
    Ok(())
}




==================== src/core/chain_call.rs ====================
use std::sync::Arc;
use std::ops::Div;
use anyhow::Result;
use alloy::{
    eips::BlockId,
    primitives::U256,
    providers::{Provider, ProviderBuilder},
};
use crate::{source::build_tx_avalanche, types::{ChainConfig, ONE_ETHER}};
use crate::source::{builder::volumes, abi::quote_calldata, builder::build_tx};
use crate::core::logger::{measure_start, measure_end};
use crate::chain::actors::ChainActors;

/// Mô phỏng quote swap bằng eth_call (multi-chain)
pub async fn run_chain_call(config: &ChainConfig, actors: &ChainActors) -> Result<()> {
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);

    let base_fee = provider.get_gas_price().await?;
    let from = config.addr("ME")?;
    let token_in = config.addr(actors.native_token_key)?;
    let token_out = config.addr(actors.stable_token_key)?;
    let quoter = config.addr(actors.quoter_key)?;

    // print address 
    // println!("From address: {}", from);
    // println!("Token in address: {}", token_in);
    // println!("Token out address: {}", token_out);
    // println!("Quoter address: {}", quoter);

    let volumes = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 100);

    let start = measure_start("chain_call");

    for (index, volume) in volumes.into_iter().enumerate() {
        let calldata = quote_calldata(token_in, token_out, volume, actors.default_fee);
        
        let tx = build_tx(quoter, from, calldata, base_fee);

        // println!("\nTransaction: {:?}", tx);
        // println!("Calling provider with transaction...");

        // let response = provider.call(&tx).await?;
        let response = provider.call(&tx).block(BlockId::latest()).await?;

        let amount_out = crate::source::abi::decode_quote_response(response)?;

        // println!("Response: {:?}", response);
        // println!("Amount out: {}", amount_out);

        if index % 20 == 0 {
            println!(
                "{} {} -> {} {}",
                volume, actors.native_token_key, actors.stable_token_key, amount_out
            );
        }
    }

    measure_end(start);
    Ok(())
}



==================== src/core/db.rs ====================
use alloy::{
    network::Ethereum,
    primitives::{keccak256, Address, Bytes, U256},
    providers::{Provider, RootProvider},
    sol_types::SolValue,
    transports::http::{Client, Http},
};
use anyhow::{anyhow, Result};
use revm::{
    db::{AlloyDB, CacheDB},
    primitives::{AccountInfo, Bytecode, ExecutionResult, Output, TransactTo},
    Evm,
};
use std::sync::Arc;

pub type AlloyCacheDB =
    CacheDB<AlloyDB<Http<Client>, Ethereum, Arc<RootProvider<Http<Client>>>>>;

pub fn init_cache_db(provider: Arc<RootProvider<Http<Client>>>) -> AlloyCacheDB {
    CacheDB::new(AlloyDB::new(provider, Default::default()).unwrap())
}

pub async fn init_account(
    address: Address,
    cache_db: &mut AlloyCacheDB,
    provider: Arc<RootProvider<Http<Client>>>,
) -> Result<()> {
    let cache_key = format!("bytecode-{:?}", address);
    let bytecode = match cacache::read(&cache_dir(), cache_key.clone()).await {
        Ok(bytecode) => {
            let bytecode = Bytes::from(bytecode);
            Bytecode::new_raw(bytecode)
        }
        Err(_) => {
            let bytecode = provider.get_code_at(address).await?;
            let bytecode_result = Bytecode::new_raw(bytecode.clone());
            let bytecode_vec = bytecode.to_vec();
            cacache::write(&cache_dir(), cache_key, bytecode_vec).await?;
            bytecode_result
        }
    };
    let code_hash = bytecode.hash_slow();
    let acc_info = AccountInfo {
        balance: U256::ZERO,
        nonce: 0_u64,
        code: Some(bytecode),
        code_hash,
    };
    cache_db.insert_account_info(address, acc_info);
    Ok(())
}

pub fn init_account_with_bytecode(
    address: Address,
    bytecode: Bytecode,
    cache_db: &mut AlloyCacheDB,
) -> Result<()> {
    let code_hash = bytecode.hash_slow();
    let acc_info = AccountInfo {
        balance: U256::ZERO,
        nonce: 0_u64,
        code: Some(bytecode),
        code_hash,
    };
    cache_db.insert_account_info(address, acc_info);
    Ok(())
}

pub fn insert_mapping_storage_slot(
    contract: Address,
    slot: U256,
    slot_address: Address,
    value: U256,
    cache_db: &mut AlloyCacheDB,
) -> Result<()> {
    let hashed_slot = keccak256((slot_address, slot).abi_encode());
    cache_db.insert_account_storage(contract, hashed_slot.into(), value)?;
    Ok(())
}

pub fn revm_call(
    from: Address,
    to: Address,
    calldata: Bytes,
    cache_db: &mut AlloyCacheDB,
) -> Result<Bytes> {
    let mut evm = Evm::builder()
        .with_db(cache_db)
        .modify_tx_env(|tx| {
            tx.caller = from;
            tx.transact_to = TransactTo::Call(to);
            tx.data = calldata;
            tx.value = U256::ZERO;
        })
        .build();

    let result = evm.transact()?.result;

    let value = match result {
        ExecutionResult::Success {
            output: Output::Call(value),
            ..
        } => value,
        result => {
            return Err(anyhow!("execution failed: {result:?}"));
        }
    };

    Ok(value)
}

pub fn revm_revert(
    from: Address,
    to: Address,
    calldata: Bytes,
    cache_db: &mut AlloyCacheDB,
) -> Result<Bytes> {
    let mut evm = Evm::builder()
        .with_db(cache_db)
        .modify_tx_env(|tx| {
            tx.caller = from;
            tx.transact_to = TransactTo::Call(to);
            tx.data = calldata;
            tx.value = U256::ZERO;
        })
        .build();

    let result = evm.transact()?.result;

    match result {
        ExecutionResult::Revert { output, .. } => Ok(output),
        _ => Err(anyhow!("Expected revert result")),
    }
}

fn cache_dir() -> String {
    ".evm_cache".to_string()
}



==================== src/core/logger.rs ====================
use std::time::Instant;
use std::fs::{OpenOptions};
use std::io::Write;
use serde::Serialize;

/// Đo thời gian bắt đầu
pub fn measure_start(label: &str) -> (String, Instant) {
    (label.to_string(), Instant::now())
}

/// Đo thời gian kết thúc và in ra stdout
pub fn measure_end(start: (String, Instant)) {
    let elapsed = start.1.elapsed();
    println!("Elapsed: {:.2?} for '{}'", elapsed, start.0);
}

/// Cấu trúc JSON log kết quả quote
#[derive(Serialize)]
pub struct QuoteLog {
    pub chain: String,
    pub method: String,
    pub volume: String,
    pub from_token: String,
    pub to_token: String,
    pub amount_out: String,
    pub elapsed_ms: u128,
}

/// Log quote ra stdout và file (tuỳ chọn)
pub fn log_quote(log: QuoteLog) {
    let json = serde_json::to_string(&log).unwrap();
    println!("{json}");

    let mut file = OpenOptions::new()
        .append(true)
        .create(true)
        .open("output/quote.jsonl")
        .unwrap();

    writeln!(file, "{json}").unwrap();
}



==================== src/core/mod.rs ====================
pub mod call;
pub mod revm;
pub mod anvil;     // chứa init_cache_db, init_account, v.v.
pub mod revm_cached; // chứa run_eth_revm_cached, v.v.
pub mod revm_quoter; // chứa run_eth_revm_quoter, v.v.
pub mod validate;
pub mod arbitrage;

pub mod chain_call;
pub mod db;        // chứa init_cache_db, init_account, v.v.
pub mod logger;    // chứa measure_start, structured log, ...



==================== src/core/revm_cached.rs ====================
use std::sync::Arc;
use std::ops::Div;
use std::str::FromStr;
use anyhow::Result;
use alloy::{
    primitives::{Bytes, U256},
    providers::ProviderBuilder,
};
use revm::primitives::Bytecode;

use crate::types::{ChainConfig, ONE_ETHER};
use crate::source::{builder::volumes, abi::*};
use crate::core::db::*;
use crate::core::logger::{measure_start, measure_end};

/// REVM mô phỏng UniswapV3 với dữ liệu cache:
/// - Gán bytecode ERC20 giả cho token
/// - Thêm balance thủ công vào REVM storage
pub async fn run_eth_revm_cached(config: &ChainConfig) -> Result<()> {
    // 1️⃣ Tạo JSON-RPC provider để lấy pool/quoter bytecode thật
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);

    // 2️⃣ Tạo cache db từ REVM memory
    let mut cache_db = init_cache_db(provider.clone());

    // 3️⃣ Địa chỉ cần dùng
    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let quoter = config.addr("QUOTER")?;
    let pool = config.addr("POOL_3000")?;

    // 4️⃣ Chuẩn bị volume để benchmark
    let volumes = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 100);

    // 5️⃣ Tải bytecode thật cho quoter + pool vào memory state
    init_account(quoter, &mut cache_db, provider.clone()).await?;
    init_account(pool, &mut cache_db, provider.clone()).await?;

    // 6️⃣ Tải bytecode ERC20 giả
    let mocked_erc20 = include_str!("../bytecode/generic_erc20.hex");
    let mocked_erc20 = Bytes::from_str(mocked_erc20)?;
    let mocked_erc20 = Bytecode::new_raw(mocked_erc20);

    // 7️⃣ Gán bytecode giả cho token (WETH, USDC)
    init_account_with_bytecode(token_in, mocked_erc20.clone(), &mut cache_db)?;
    init_account_with_bytecode(token_out, mocked_erc20.clone(), &mut cache_db)?;

    // 8️⃣ Gán balance giả trong storage
    let mocked_balance = U256::MAX / U256::from(2);
    insert_mapping_storage_slot(token_in, U256::ZERO, pool, mocked_balance, &mut cache_db)?;
    insert_mapping_storage_slot(token_out, U256::ZERO, pool, mocked_balance, &mut cache_db)?;

    // 9️⃣ Quote lần đầu
    let start = measure_start("revm_cached_first");
    let calldata = quote_calldata(token_in, token_out, volumes[0], 3000);
    let response = revm_call(from, quoter, calldata, &mut cache_db)?;
    let amount_out = decode_quote_response(response)?;
    println!("{} WETH -> USDC {}", volumes[0], amount_out);
    measure_end(start);

    // 🔟 Quote nhiều volume để test hiệu suất
    let start = measure_start("revm_cached_loop");
    for (index, volume) in volumes.into_iter().enumerate() {
        let calldata = quote_calldata(token_in, token_out, volume, 3000);
        let response = revm_call(from, quoter, calldata, &mut cache_db)?;
        let amount_out = decode_quote_response(response)?;
        if index % 20 == 0 {
            println!("{} WETH -> USDC {}", volume, amount_out);
        }
    }
    measure_end(start);

    Ok(())
}



==================== src/core/revm_quoter.rs ====================
use std::sync::Arc;
use std::ops::Div;
use std::str::FromStr;
use anyhow::Result;
use alloy::{
    primitives::{Bytes, U256},
    providers::ProviderBuilder,
};
use revm::primitives::Bytecode;

use crate::types::{ChainConfig, ONE_ETHER};
use crate::source::{builder::volumes, abi::*};
use crate::core::db::*;
use crate::core::logger::{measure_start, measure_end};

/// REVM chạy quote bằng custom UniV3Quoter contract (trả kết quả trong revert)
pub async fn run_eth_revm_quoter(config: &ChainConfig) -> Result<()> {
    // 1️⃣ Khởi tạo provider và cache_db
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);
    // Tạo REVM cache database từ provider
    let mut cache_db = init_cache_db(provider.clone());

    // 2️⃣ Đọc address từ config
    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let pool = config.addr("POOL_3000")?;
    let quoter = config.addr("CUSTOM_QUOTER")?;

    // 3️⃣ Chuẩn bị volume để benchmark
    let volumes = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 100);

    // 4️⃣ Load bytecode thật và giả vào REVM
    init_account(from, &mut cache_db, provider.clone()).await?;
    init_account(pool, &mut cache_db, provider.clone()).await?;

    let mocked_erc20 = include_str!("../bytecode/generic_erc20.hex");
    let mocked_erc20 = Bytecode::new_raw(Bytes::from_str(mocked_erc20)?);
    init_account_with_bytecode(token_in, mocked_erc20.clone(), &mut cache_db)?;
    init_account_with_bytecode(token_out, mocked_erc20.clone(), &mut cache_db)?;

    // 5️⃣ Insert fake balances vào REVM storage
    let mocked_balance = U256::MAX / U256::from(2);
    insert_mapping_storage_slot(token_in, U256::ZERO, pool, mocked_balance, &mut cache_db)?;
    insert_mapping_storage_slot(token_out, U256::ZERO, pool, mocked_balance, &mut cache_db)?;

    // 6️⃣ Load custom quoter bytecode (trả kết quả qua revert)
    let mocked_custom_quoter = include_str!("../bytecode/uni_v3_quoter.hex");
    let mocked_custom_quoter = Bytecode::new_raw(Bytes::from_str(mocked_custom_quoter)?);
    init_account_with_bytecode(quoter, mocked_custom_quoter, &mut cache_db)?;

    // 7️⃣ Quote đầu tiên
    let start = measure_start("revm_quoter_first");
    let calldata = get_amount_out_calldata(pool, token_in, token_out, volumes[0]);
    let response = revm_revert(from, quoter, calldata, &mut cache_db)?;
    let amount_out = decode_get_amount_out_response(response)?;
    println!("{} WETH -> USDC {}", volumes[0], amount_out);
    measure_end(start);

    // 8️⃣ Loop benchmark các volume còn lại
    let start = measure_start("revm_quoter_loop");
    for (index, volume) in volumes.into_iter().enumerate() {
        let calldata = get_amount_out_calldata(pool, token_in, token_out, volume);
        let response = revm_revert(from, quoter, calldata, &mut cache_db)?;
        let amount_out = decode_get_amount_out_response(response)?;
        if index % 20 == 0 {
            println!("{} WETH -> USDC {}", volume, amount_out);
        }
    }
    measure_end(start);

    Ok(())
}



==================== src/core/revm.rs ====================
use std::sync::Arc;
use std::ops::Div;
use anyhow::Result;
use alloy::{
    primitives::U256,
    providers::{ProviderBuilder, RootProvider},
    transports::http::{Http, Client},
};

use crate::types::{ChainConfig, ONE_ETHER};
use crate::source::{builder::volumes, abi::*};
use crate::core::db::{init_cache_db, init_account, revm_call};
use crate::core::logger::{measure_start, measure_end};

/// Mô phỏng quote swap từ UniswapV3 bằng `REVM` (EVM giả lập offchain)
/// Dùng calldata quoteExactInputSingle() và simulate bằng REVM trên memory state
pub async fn run_eth_revm(config: &ChainConfig) -> Result<()> {
    // 1️⃣ Khởi tạo JSON-RPC provider để fetch bytecode từ chain thực
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);

    // 2️⃣ Tạo REVM CacheDB từ provider chain thực
    let mut cache_db = init_cache_db(provider.clone());

    // 3️⃣ Địa chỉ dùng trong giao dịch (từ config)
    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let quoter = config.addr("QUOTER")?;

    // 4️⃣ Chuẩn bị volume swap để benchmark
    let volumes = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 100);

    // 5️⃣ Tải bytecode của contract quoter vào REVM memory state
    init_account(quoter, &mut cache_db, provider.clone()).await?;

    // 6️⃣ Mô phỏng lần đầu: WETH → USDC với volume đầu tiên
    let start = measure_start("revm_first");
    let calldata = quote_calldata(token_in, token_out, volumes[0], 3000);
    let response = revm_call(from, quoter, calldata, &mut cache_db)?;
    let amount_out = decode_quote_response(response)?;
    println!("{} WETH -> USDC {}", volumes[0], amount_out);
    measure_end(start);

    // 7️⃣ Mô phỏng lặp nhiều volume để benchmark hiệu suất
    let start = measure_start("revm_loop");
    for (index, volume) in volumes.into_iter().enumerate() {
        let calldata = quote_calldata(token_in, token_out, volume, 3000);
        let response = revm_call(from, quoter, calldata, &mut cache_db)?;
        let amount_out = decode_quote_response(response)?;

        if index % 20 == 0 {
            println!("{} WETH -> USDC {}", volume, amount_out);
        }
    }
    measure_end(start);

    Ok(())
}



==================== src/core/validate.rs ====================
use std::sync::Arc;
use std::ops::{Div, Mul};
use std::str::FromStr;
use anyhow::Result;
use alloy::providers::Provider;
use alloy::{
    primitives::{Bytes, U256},
    providers::ProviderBuilder,
};
use revm::primitives::Bytecode;

use crate::types::{ChainConfig, ONE_ETHER};
use crate::source::{builder::volumes, abi::*, builder::build_tx};
use crate::core::db::*;

/// So sánh kết quả quote từ `eth_call` và `revm`
/// Dùng custom UniV3Quoter để đảm bảo REVM phản hồi `amountOut` đúng
pub async fn run_eth_validate(config: &ChainConfig) -> Result<()> {
    // 1️⃣ Setup RPC và provider
    let provider = ProviderBuilder::new()
        .on_http(config.rpc_url.parse()?);
    let provider = Arc::new(provider);
    // Tạo REVM cache database từ provider

    let mut cache_db = init_cache_db(provider.clone());

    let base_fee = provider.get_gas_price().await?;
    let base_fee = base_fee.mul(110).div(100); // +10% để đảm bảo an toàn fee

    // 2️⃣ Load address từ config
    let from = config.addr("ME")?;
    let token_in = config.addr("WETH")?;
    let token_out = config.addr("USDC")?;
    let pool = config.addr("POOL_3000")?;
    let quoter = config.addr("QUOTER")?;
    let custom_quoter = config.addr("CUSTOM_QUOTER")?;

    // 3️⃣ Chuẩn bị volume và mock data
    let volumes = volumes(U256::ZERO, ONE_ETHER.div(U256::from(10)), 10);

    init_account(from, &mut cache_db, provider.clone()).await?;
    init_account(pool, &mut cache_db, provider.clone()).await?;

    let mocked_erc20 = include_str!("../bytecode/generic_erc20.hex");
    let mocked_erc20 = Bytecode::new_raw(Bytes::from_str(mocked_erc20)?);
    init_account_with_bytecode(token_in, mocked_erc20.clone(), &mut cache_db)?;
    init_account_with_bytecode(token_out, mocked_erc20.clone(), &mut cache_db)?;

    let mocked_balance = U256::MAX / U256::from(2);
    insert_mapping_storage_slot(token_in, U256::ZERO, pool, mocked_balance, &mut cache_db)?;
    insert_mapping_storage_slot(token_out, U256::ZERO, pool, mocked_balance, &mut cache_db)?;

    let mocked_custom_quoter = include_str!("../bytecode/uni_v3_quoter.hex");
    let mocked_custom_quoter = Bytecode::new_raw(Bytes::from_str(mocked_custom_quoter)?);
    init_account_with_bytecode(custom_quoter, mocked_custom_quoter, &mut cache_db)?;

    // 4️⃣ So sánh từng volume
    for volume in volumes {
        let call_calldata = quote_calldata(token_in, token_out, volume, 3000);
        let tx = build_tx(quoter, from, call_calldata, base_fee);
        let call_response = provider.call(&tx).await?;
        let call_amount_out = decode_quote_response(call_response)?;

        let revm_calldata = get_amount_out_calldata(pool, token_in, token_out, volume);
        let revm_response = revm_revert(from, custom_quoter, revm_calldata, &mut cache_db)?;
        let revm_amount_out = decode_get_amount_out_response(revm_response)?;

        println!(
            "{} WETH -> USDC | REVM: {} | ETH_CALL: {}",
            volume, revm_amount_out, call_amount_out
        );

        // 5️⃣ Xác minh chính xác
        assert_eq!(revm_amount_out, call_amount_out);
    }

    Ok(())
}



